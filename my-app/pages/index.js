import Head from "next/head";
import React, { useState, useEffect } from "react";
import * as PushAPI from "@pushprotocol/restapi";
import { ethers } from "ethers";
import { ConnectButton } from "@rainbow-me/rainbowkit";
import ABI from "../contracts/mpc.json";
import sharelock from "../public/sharelock.png"
// import zkProof from "../../zk1/src/index"

import { Inter } from "next/font/google";
import { useProvider, useSigner } from "wagmi";

const inter = Inter({ subsets: ["latin"] });

export default function Home() {
  const [addr1, setAddr1] = useState("");
  const [addr2, setAddr2] = useState("");
  const [addr3, setAddr3] = useState("");
  const [approval, setApproval] = useState("");
  console.log(approval);

  const defaultSnapOrigin = `local:http://localhost:8080`;
  const [formData, setFormData] = useState({});
  // channel private key

  const provider = useProvider();
  const { data: signer } = useSigner();
  console.log(signer);

  const mpcContract = new ethers.Contract(
    "0x3Dac5387db62696ae8b0BEB80518E8C025eeb7D4",
    ABI,
    signer
  );
  console.log(mpcContract);

  useEffect(() => {
    approvalCount();
  });

  const sendNotification = async () => {
    const Pkey = `0x4d31dd75de7e5c056250e47f48370d96632246a81f7650b651571da85510d2f0`;
    const _signer = new ethers.Wallet(Pkey);

    const account = (await provider.listAccounts())[0];
    console.log(account);

    const apiResponse = await PushAPI.payloads.sendNotification({
      signer: _signer,
      type: 3, // target
      identityType: 2, // direct payload
      notification: {
        title: `Recovery`,
        body: `Approve with your part of the share!`,
      },
      payload: {
        title: `Enter your part of the share!`,
        body: `Recovery for the PVT key`,
        cta: "",
        img: "",
      },
      recipients: `eip155:5:0x050F40Aa40C72f77AF60c9Aaf56cE9d36550AF70`, // recipient address
      channel: "eip155:5:0xAa152e5a07204ad8703eC5A716E329d6bC208aDd", // your channel address
      env: "staging",
    });
    console.log(apiResponse);
  };

  const handleInputChange = async (event) => {
    await mpcContract.ownerInput([
      ethers.utils.getAddress(addr1),
      ethers.utils.getAddress(addr2),
      ethers.utils.getAddress(addr3),
    ]);
  };

  const approvalCount = async () => {
    const Count = await mpcContract.getApproval();
    const approve = await Count.toString();
    setApproval(approve);

    console.log(approve);
  };
  approvalCount();

  const connectSnap = async (snapId = defaultSnapOrigin, params = {}) => {
    await window.ethereum?.request({
      method: "wallet_requestSnaps",
      params: {
        [snapId]: params,
      },
    });
  };

  const callSnap = async () => {
    await window.ethereum?.request({
      method: "wallet_invokeSnap",
      params: {
        snapId: defaultSnapOrigin,
        request: {
          method: "split",
        },
      },
    });
  };

  const combine = async () => {
    await window.ethereum?.request({
      method: "wallet_invokeSnap",
      params: {
        snapId: defaultSnapOrigin,
        request: {
          method: "combine",
        },
      },
    });
    await approvalCount();
  };
  console.log(approval);

  const proof = async () => {
    console.log(approval);

    if (approval == 3) {
      combine();
    } else {
      alert("Not enough approvals");
    }
  };

  return (
    <>
      <Head>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link href="/dist/output.css" rel="stylesheet" />
      </Head>

      <div className="flex flex-row items-center align-middle ">
        <button
          className="bg-black font-semibold text-white px-4 py-2 m-4 rounded-xl"
          onClick={() => connectSnap()}
        >
          Install Snap
        </button>
        <button
          className="bg-black font-semibold text-white px-4 py-2 m-4 rounded-xl"
          onClick={() => callSnap()}
        >
          {" "}
          split{" "}
        </button>
        <button
          className="bg-black font-semibold text-white px-4 py-2 m-4 rounded-xl"
          onClick={() => proof()}
        >
          {" "}
          combine{" "}
        </button>
        <ConnectButton />
      </div>
      <div class="flex flex-row">
  <div class="basis-1/2 justify-center items-center align-middle h-72 mt-24 ml-36"> 
  <div class="flex flex-col "> 
  <div class = "justify-self-center mt-6 ml-32"> <img
      src="sharelock.png"
      class="h-auto w-32 rounded-lg"
      alt="" />
      </div>
      <div class="ml-12"> <h1 class="mb-4 text-3xl font-extrabold text-gray-900 dark:text-white md:text-5xl lg:text-6xl"><span class="text-transparent bg-clip-text bg-gradient-to-r to-gray-600 from-gray-400">ShareLock</span> </h1></div>
      <div class="w-50"> <p class="italic bold decoration-2 hover:decoration-4">
      Keep your keys safe, shareable, 
      and recoverable with ease.
</p></div>
      </div>
  
  
  
  
  </div>
  <div class="basis-1/2 gap-4 justify-items-stretch  h-72">
        <div class="text-gray-700  flex justify-center items-center px-4 py-2"></div>
        <div class="justify-self-center shadow-2xl w-4/5 mt-20 rounded-lg text-gray-800 flex justify-center items-center px-4 py-2">
          <form class="w-full max-w-sm content-center">
            <div class="md:flex md:items-center mb-6 mt-6">
              <div class="md:w-1/3">
                <label
                  class="block text-gray-500 font-bold md:text-right mb-1 md:mb-0 pr-4"
                  for="inline-full-name"
                >
                  Guardian Wallet 1
                </label>
              </div>
              <div class="md:w-2/3">
                <input
                  class="bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500"
                  type="text"
                  placeholder="Address"
                  id="guardianWallet1"
                  onChange={(e) => setAddr1(e.target.value)}
                />
              </div>
            </div>
            <div class="md:flex md:items-center mb-6">
              <div class="md:w-1/3">
                <label
                  class="block text-gray-500 font-bold md:text-right mb-1 md:mb-0 pr-4"
                  for="inline-password"
                >
                  Guardian Wallet 2
                </label>
              </div>
              <div class="md:w-2/3">
                <input
                  class="bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500"
                  type="text"
                  placeholder="Address"
                  id="guardianWallet2"
                  onChange={(e) => setAddr2(e.target.value)}
                />
              </div>
            </div>
            <div class="md:flex md:items-center mb-6">
              <div class="md:w-1/3">
                <label
                  class="block text-gray-500 font-bold md:text-right mb-1 md:mb-0 pr-4"
                  for="inline-password"
                >
                  Guardian Wallet 3
                </label>
              </div>
              <div class="md:w-2/3">
                <input
                  class="bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500"
                  type="text"
                  placeholder="Address"
                  id="guardianWallet3"
                  onChange={(e) => setAddr3(e.target.value)}
                />
              </div>
            </div>

            <div class="md:flex md:items-center">
              <div class="md:w-1/3"></div>
              <div class="md:w-2/3">
                <button
                  class="shadow bg-black hover:bg-gray-400 focus:shadow-outline focus:outline-none text-white font-bold py-2 px-4 rounded"
                  type="button"
                  onClick={handleInputChange}
                >
                  Sign Up
                </button>
              </div>
            </div>
          </form>
        </div>
        <div class="md:flex mt-6 ml-44 md:items-center">
        <div class="md:w-1/3"></div>
        <div class="md:w-2/3">
          <button
            class="shadow  hover:bg-gray-400 focus:shadow-outline focus:outline-none text-black font-bold py-2 px-4 rounded"
            type="button"
            onClick={sendNotification}
          >
            Forgot Password?
          </button>
        </div>
      </div>
      </div>

     
      

  
</div>
 <footer class="bg-white text-center text-black mt-28">
  <div class="container px-6 pt-6">
    <div class="mb-6 flex justify-center">
      

      <a
        href="https://www.linkedin.com/in/ruthu-rao-b28116212/"
        type="button"
        class="m-1 h-9 w-9 rounded-full border-2 border-black uppercase leading-normal text-black transition duration-150 ease-in-out hover:bg-black hover:bg-opacity-5 focus:outline-none focus:ring-0"
        data-te-ripple-init
        data-te-ripple-color="light">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="mx-auto h-full w-4"
          fill="currentColor"
          viewBox="0 0 24 24">
          <path
            d="M24 4.557c-.883.392-1.832.656-2.828.775 1.017-.609 1.798-1.574 2.165-2.724-.951.564-2.005.974-3.127 1.195-.897-.957-2.178-1.555-3.594-1.555-3.179 0-5.515 2.966-4.797 6.045-4.091-.205-7.719-2.165-10.148-5.144-1.29 2.213-.669 5.108 1.523 6.574-.806-.026-1.566-.247-2.229-.616-.054 2.281 1.581 4.415 3.949 4.89-.693.188-1.452.232-2.224.084.626 1.956 2.444 3.379 4.6 3.419-2.07 1.623-4.678 2.348-7.29 2.04 2.179 1.397 4.768 2.212 7.548 2.212 9.142 0 14.307-7.721 13.995-14.646.962-.695 1.797-1.562 2.457-2.549z" />
        </svg>
      </a>

      

      

      <a
        href="https://twitter.com/RuthuRao"
        type="button"
        class="m-1 h-9 w-9 rounded-full border-2 border-black uppercase leading-normal text-black transition duration-150 ease-in-out hover:bg-black hover:bg-opacity-5 focus:outline-none focus:ring-0"
        data-te-ripple-init
        data-te-ripple-color="light">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="mx-auto h-full w-4"
          fill="currentColor"
          viewBox="0 0 24 24">
          <path
            d="M4.98 3.5c0 1.381-1.11 2.5-2.48 2.5s-2.48-1.119-2.48-2.5c0-1.38 1.11-2.5 2.48-2.5s2.48 1.12 2.48 2.5zm.02 4.5h-5v16h5v-16zm7.982 0h-4.968v16h4.969v-8.399c0-4.67 6.029-5.052 6.029 0v8.399h4.988v-10.131c0-7.88-8.922-7.593-11.018-3.714v-2.155z" />
        </svg>
      </a>

      <a
        href="https://github.com/route-2/ShareLock"
        type="button"
        class="m-1 h-9 w-9 rounded-full border-2 border-black uppercase leading-normal text-black transition duration-150 ease-in-out hover:bg-black hover:bg-opacity-5 focus:outline-none focus:ring-0"
        data-te-ripple-init
        data-te-ripple-color="light">
        <svg
          xmlns="http://www.w3.org/2000/svg"
          class="mx-auto h-full w-4"
          fill="currentColor"
          viewBox="0 0 24 24">
          <path
            d="M12 0c-6.626 0-12 5.373-12 12 0 5.302 3.438 9.8 8.207 11.387.599.111.793-.261.793-.577v-2.234c-3.338.726-4.033-1.416-4.033-1.416-.546-1.387-1.333-1.756-1.333-1.756-1.089-.745.083-.729.083-.729 1.205.084 1.839 1.237 1.839 1.237 1.07 1.834 2.807 1.304 3.492.997.107-.775.418-1.305.762-1.604-2.665-.305-5.467-1.334-5.467-5.931 0-1.311.469-2.381 1.236-3.221-.124-.303-.535-1.524.117-3.176 0 0 1.008-.322 3.301 1.23.957-.266 1.983-.399 3.003-.404 1.02.005 2.047.138 3.006.404 2.291-1.552 3.297-1.23 3.297-1.23.653 1.653.242 2.874.118 3.176.77.84 1.235 1.911 1.235 3.221 0 4.609-2.807 5.624-5.479 5.921.43.372.823 1.102.823 2.222v3.293c0 .319.192.694.801.576 4.765-1.589 8.199-6.086 8.199-11.386 0-6.627-5.373-12-12-12z" />
        </svg>
      </a>
      <h4
       
        type="button"
        class="m-2 h-9    leading-normal text-black transition duration-150 ease-in-out hover:bg-black hover:bg-opacity-5 focus:outline-none focus:ring-0"
        data-te-ripple-init
        data-te-ripple-color="light">
       Made with 🖤  by Ruthu 
      </h4>
      
    </div>
  </div>

  
</footer>
      
    </>
  );
}
